name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read
      actions: read

    env:
      AWS_REGION: us-east-1
      ECR_REPOSITORY: prima-api
      EKS_CLUSTER_NAME: prima-tech-challenge-cluster
      HELM_CHART_PATH: helm/prima-api
      PYTHON_PATH: prima-api-server
      ACCOUNT_ID: 870342665742
      IMAGE_TAG: ${{ github.sha }}

    steps:
      # 1. Checkout
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure AWS credentials via OIDC
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/github-actions-prima-api-role
          aws-region: ${{ env.AWS_REGION }}

      # 3. Install Python & dependencies
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r $PYTHON_PATH/requirements.txt
          pip install pytest

      # 4. Run unit tests
      - name: Run tests
        run: pytest -vv -s --durations=0 $PYTHON_PATH/tests

      # 5. Authenticate Docker to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com

      # 6. Build and tag Docker image (no cache)
      - name: Build Docker image
        run: |
          docker build --no-cache -t $ECR_REPOSITORY:$IMAGE_TAG $PYTHON_PATH
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # 6.1 Scan image with Trivy (fail only on CRITICAL)
      - name: Run Trivy scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"
          severity: CRITICAL
          ignore-unfixed: true
          format: table
          exit-code: 1

      # 7. Push Docker image
      - name: Push Docker image
        run: docker push ${ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      # 8. Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: v1.30.0

      # 9. Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.14.4

      # 10. Update kubeconfig for EKS
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region $AWS_REGION --name $EKS_CLUSTER_NAME

      # 11. Deploy with Helm
      - name: Deploy application
        run: |
          helm upgrade --install prima-api $HELM_CHART_PATH \
            --set image.repository=${ACCOUNT_ID}.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY \
            --set image.tag=$IMAGE_TAG \
            --set image.pullPolicy=Always

      # 12. Wait for LoadBalancer and test /users
      - name: Wait for LoadBalancer and test /users
        run: |
          echo "Waiting for LoadBalancer external hostname..."
          for i in {1..30}; do
            LB_HOST=$(kubectl get svc prima-api -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            if [ -n "$LB_HOST" ]; then
              echo "Found LB Host: $LB_HOST"
              if nslookup "$LB_HOST" > /dev/null 2>&1; then
                echo "DNS is ready for $LB_HOST"
                break
              else
                echo "DNS not ready yet for $LB_HOST, retrying..."
              fi
            fi
            sleep 10
          done

          if [ -z "$LB_HOST" ]; then
            echo "LoadBalancer hostname not found after waiting."
            exit 1
          fi

          echo "Testing /users endpoint..."
          curl -v --max-time 20 "http://$LB_HOST/users" || exit 1
          echo "Successfully tested /users endpoint."
